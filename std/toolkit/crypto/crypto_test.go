package crypto

import (
	"fmt"
	"testing"

	"strings"

	"github.com/stretchr/testify/assert"
)

var dataStr = `
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
abcdefg123456711111111111111111111111111111111111
abcdefg1234567111111111111111111111111111111111111
`

func TestCrypto(t *testing.T) {
	data := []byte("1731344703dsadasdskadmk8dj")
	//key := []byte("example key 1234")
	aa := Base64URLEncode(data)
	aa = strings.Replace(aa, "=", "", -1)
	fmt.Println("Encrypted:", aa)
	ss := len(aa) % 4

	fmt.Println(ss)
	if ss != 0 {
		for i := 0; i < 4-ss; i++ {
			aa = aa + "="
		}
	}

	fmt.Println(aa)
	re, err := Base64URLDecode(aa)
	fmt.Println("Decrypted:", string(re), err)
	//assert.Equal(t, data, re)

	t.Log(RandNumStr(6))
	t.Log(RandNumStr(16))
}

func TestPassword(t *testing.T) {
	assert.Equal(t, true, VerifyPassword(SaltPassword("abc"), "abc"))
	b := []byte("$2y$10$7cP8py/C/8B.of.VErqT/eIahwXtrMkTHETGCx53yxTH674s6pR7i")
	assert.True(t, VerifyPassword(b, "123"))
}

func TestPassword2(t *testing.T) {
	assert.Equal(t, true, VerifyPassword2(SaltPassword2("abc"), "abc"))
}

func TestGuid(t *testing.T) {
	t.Log(SimpleGuid())
}
